{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to SDE Prep A2Z","text":"<p>Ye karne ke baad bhi tu gawar hi rahega</p>"},{"location":"#why-this-site","title":"\ud83d\ude80 Why this site?","text":"<ul> <li>Kyuki lawde unemployed hai tu</li> </ul>"},{"location":"#navigation","title":"\ud83e\udded Navigation","text":"<p>Jaake padle gaandu:</p> <ul> <li>\ud83d\udcc2 Arrays</li> <li>\ud83d\udd01 Dynamic Programming</li> <li>\ud83c\udf10 Graphs</li> </ul>"},{"location":"#dsa-preparation-checklist","title":"\u2705 DSA Preparation Checklist","text":"<ul> <li>[] Dynamic Programming</li> <li>[] Arrays </li> <li>[] Graph</li> </ul>"},{"location":"DSAyy/arrays/","title":"Array Simulation","text":""},{"location":"DSAyy/arrays/#spiral-order-matrix","title":"Spiral Order Matrix","text":""},{"location":"DSAyy/arrays/#question-kya-hai","title":"Question kya hai","text":"<p>Matrix A: Size M x N, return all elements in the spiral order. (clockwise starting from top-left)</p> <p>$$ \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \\ 7 &amp; 8 &amp; 9 \\end{bmatrix} $$ the output would be \\(1,2,3,6,9,8,7,4,5\\)</p>"},{"location":"DSAyy/arrays/#how-to-do-this","title":"How to do this","text":"<p>Take 4 pointers and continuously run for loops on that bitch.  Bas run top first, then right, then down, then left</p> <pre><code>vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt; &amp;A){\n    int M = A.size(), N = A[0].size();\n    int u = 0, d = M-1, l = 0, r = N-1;\n    vector&lt;int&gt; spiral;\n    while (l &lt;= r &amp;&amp; u &lt;= d){\n        for (int i = l; i &lt;= r; ++i)\n            spiral.push_back(A[u][i]);\n        ++u;\n        for (int i = u; i &lt;= d; ++i)\n            spiral.push_back(A[i][r]);\n        --r;\n        if (u &lt;= d){\n            for (int i = r; i &gt;= l; --i)\n                spiral.push_back(A[d][i]);\n            --d;\n        }\n        if (l &lt;= r){\n            for (int i = d; i &gt;= u; --i)\n                spiral.push_back(A[i][l]);\n            ++l;\n        }\n    }\n    return spiral;\n}\n</code></pre> <p>Iski time complexity is \\(O(n \\times m)\\) Space complexity bhi same</p>"},{"location":"DSAyy/arrays/#large-factorial","title":"Large Factorial","text":""},{"location":"DSAyy/arrays/#question","title":"Question","text":"<p>Given integer A, compute A ! as a string, coz kuch zyaada hi bada number hai.</p>"},{"location":"DSAyy/arrays/#kaise-karna-hai-ye","title":"Kaise karna hai ye","text":"<p>Dekh bro as a string return karna hai answer toh legit make a multiply function for strings and karle solve. Kya hi dumb shit hai ye. Just know ki digits would be reversed for the convenience of the carry shit.  Toh reverse pointer se string meh add kariyo.</p> <pre><code>string factorial(int A){\n    vector&lt;int&gt; digits {1}; // har factorial meh 1 toh hota hi hai\n\n    auto multiply = [&amp;](int i) {\n        int carry = 0;\n        for (int &amp;d : digits){\n            long long prod = (long long)d * i + carry;\n            d = prod % 10; // same time digit update kar diya\n            carry = prod / 10;\n        }\n        while (carry){\n            digits.push_back(carry % 10);\n            carry /= 10;\n        }\n    };\n\n    for (int i = 2; i &lt;= A; ++i) // multiply sabkuch from 2 to A\n    {\n        multiply(i); // multiple every number into 2\n    }\n    string s;\n    // put all the digits into a string\n    for (auto it = digits.rbegin(); it != digits.rend(); ++it){\n        s.push_back('0' + *it); \n    }\n    return s;\n}\n</code></pre>"},{"location":"DSAyy/arrays/#max-non-negative-subarray","title":"Max Non-Negative Subarray","text":""},{"location":"DSAyy/arrays/#question-kya-hai_1","title":"Question kya hai","text":"<p>Array A of N integers, find the subarray with max sum. agar tied, choose the longer one. still tied? smallest starting index</p> <p>Sunn BEHENCHOD, Subarray means continuous, sab kuch subsequence nahi hota</p>"},{"location":"DSAyy/arrays/#karna-kaise-hai","title":"Karna kaise hai","text":"<p>kadane kadane khelenge agar negative number mila, that is where we stop and process the answer. By process i mean, bas compare karke check karlenge if its max</p> <p>End meh bhi ek baar check kar lena coz when the loop ends, ek baar remaining computation bhi toh update karni hai.</p> <pre><code>vector&lt;int&gt; maxSet(vector&lt;int&gt; &amp;A){\n    int n = A.size();\n    long long bestSum = -1, curSum = 0;\n    int bestStart = 0, bestEnd = -1, bestLen = 0;\n    int curStart = 0;\n    for (int i = 0; i &lt; n; ++i){\n        if (A[i] &gt;= 0)\n            curSum += A[i];\n        else {\n            int curLen = i - curStart;\n            if (curSum &gt; bestSum || (curSum == bestSum &amp;&amp; curLen &gt; bestLen)){\n                bestSum = curSum;\n                bestStart = curStart;\n                bestEnd = i - 1;\n                bestLen = curLen;\n            }\n            curSum = 0;\n            curStart = i+1;\n        }\n    }\n    if (curStart &lt; n){\n        int curLen = n - curStart;\n        if (curSum &gt; bestSum || (curSum == bestSum &amp;&amp; curLen &gt; bestLen)){\n            bestSum = curSum;\n            bestStart = curStart;\n            bestEnd = n - 1;\n            bestLen = curLen;\n        }\n    }\n    if (bestEnd &lt; bestStart) return {};\n    return vector&lt;int&gt;(A.begin()+bestStart, A.begin()+bestEnd + 1);\n}\n</code></pre> <p>Time complexity is O(n), space complexity is O(1)</p>"},{"location":"DSAyy/arrays/#pick-from-both-sides","title":"Pick from Both Sides","text":"<p>Array A of N elements. Pick exactly B elements from either left ya right end, and just get the max sum.</p>"},{"location":"DSAyy/arrays/#karna-kaise-hai_1","title":"Karna kaise hai","text":"<p>Imagine kar ek sexy sa sliding window, but instead on inside the array, ye saala bahar se aa raha hai. like the right pointer is left meh and left wala is right meh. ye leke bas max sum with B elements karle. Start the right pointer at B - i, and keep the left wala at n - i, and baaju baaju shift and update karte ja. Keep a sum of first B elements, and fir middle se ek hata and right end wala ek daal.</p> <pre><code>int pickBothSides(vector&lt;int&gt; &amp;A, int B){\n    int n = A.size();\n    int window = accumulate(A.begin(), A.begin() + B, 0);\n    int ans = window;\n    for (int i = 1; i &lt;= B; ++i){\n        window = window - A[B-i] + A[n-i];\n        ans = max(ans, window);\n    }\n    return ans;\n}\n</code></pre> <p>Time complexity is O(n) and space complexity is O(1)</p>"},{"location":"DSAyy/dp/","title":"Dynamic Programming","text":""},{"location":"DSAyy/dp/#longest-common-subsequence","title":"Longest Common Subsequence","text":""},{"location":"DSAyy/dp/#question-statement","title":"Question Statement","text":"<p>Given 2 strings, find the length of uska longest common subsequence. Note subsequence does not have to be continuous.</p> <p>Example: A = \\(abbcdgf\\) and B = \\(bbadcgf\\)  toh the output would be 5 (bbcgf is the lcs)</p>"},{"location":"DSAyy/dp/#kaise-karna-hai","title":"Kaise karna hai","text":"<p>Thode subproblems meh divide karte hai isse. Let \\(\\text{LCS[i][j] be LCS of substrings A[0...i] and B[0....j]}\\) . Toh the obvious relation we can find is if \\(\\text{A[i-1] == B[j-1] fir LCS[i][j] is just LCS[i-1][j-1] + 1}\\)  which means ki humme ek element same mil gaya, toh length would be 1 + the substrings removing those used indexes dono strings se. else \\(\\text{take max of LCS[i-1][j] and LCS[i][j-1]}\\) coz wahi dono possibilities are left.  which means dono string se ek element skip karke check karlo Humhe continuity bhi maintain karni hai. Thats it literally.</p> <p><pre><code>int LCS(string A, string B){\n    int n = A.size(), m = B.size();\n    vector&lt;vector&lt;int&gt;&gt; lcs(n+1, vector&lt;int&gt;(m+1,0));\n    for (int i = 1; i &lt;= n; ++i)\n        for (int j = 1; j &lt;= m; ++j){\n            if (A[i-1] == B[j-1]) lcs[i][j] = 1 + lcs[i-1][j-1];\n            else lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]); \n        }\n    return lcs[n][m];\n}\n</code></pre> Time complexity \\(O(n \\times m)\\)  and and same with space Now the sexy part is hum isse aur optimize kar sakte hai</p> <p>Abhi let \\(\\text{prev}\\) be the results of the i-1 row, and \\(curr\\) be the result of the current row i</p> <p>\\(\\text{LCS[i-1][j-1] = previous row ka j-1}\\) \\(\\text{LCS[i-1][j] = previous row ka j}\\) \\(\\text{LCS[i][j-1] = cur row ka j-1}\\)</p> <pre><code>int LCS(string A, string B){\n    int n = A.size(), m = B.size();\n    if (m &gt; n){\n        // keeping the rows as the bigger one, since lcs ka upper limit toh chotta wala hi hoga\n        swap(A,B);\n        swap(m,n);\n    }\n    vector&lt;int&gt; prev(m+1, 0), cur(m+1,0);\n    for (int row = 1; row &lt;= n; ++row){\n        for (int j = 1; j &lt;= m; ++j){\n            if (A[i-1] == B[j-1])\n                cur[j] = prev[j-1] + 1; \n                // we found a similar el, toh prev row ke result se ek zyada hoga\n            else \n                cur[j] = max(prev[j], cur[j-1]);\n        }\n        swap(prev,cur)\n    }\n    return prev[M]\n}\n</code></pre> <p>Isme the space complexity changed from \\(O(n\\times m)\\) se \\(O(min(n,m))\\) </p>"},{"location":"DSAyy/dp/#longest-palindromic-subsequence","title":"Longest Palindromic Subsequence","text":""},{"location":"DSAyy/dp/#question-statement_1","title":"Question Statement","text":"<p>Given a string A, find length of the longest palindromic subsequence. Example: \\(A = beebeeed\\)  the output would be 4 coz LPS is \\(eeee\\)</p>"},{"location":"DSAyy/dp/#karna-kaise-hai","title":"Karna kaise hai","text":"<p>Abe chutiye, Longest palindromic substring is just the LCS of A and reversed(A)</p> <p>I am not even gonna waste my time fuck off. $$ LPS(A) = LCS(A, reverse(A)) $$</p>"},{"location":"DSAyy/dp/#edit-distance","title":"Edit Distance","text":""},{"location":"DSAyy/dp/#problem-statement","title":"Problem Statement","text":"<p>Given 2 strings, find min steps required to convert A to B given in one step we can - Insert a char - Delete a char - Replace a char Example: - A = abad, B = abac. The output is 1 coz sirf c ko d se replace karna</p>"},{"location":"DSAyy/dp/#kaise-karna","title":"Kaise karna","text":"<p>Let \\(edit[i][j]\\) be the minimum dist to convert \\(A[0...i-1] \\space and \\space B[0...j-1]\\)  Toh iska rishta is  $$ edit[i][j] = edit[i-1][j-1] \\space \\text{if A[i-1] and B[j-1] same hai} $$ $$ \\text{else if its different, edit[i][j] is gonna be 1 + min(edit[i-1][j], edit[i-1][j-1], edit[i-1][j-1])} $$ \\(edit[i-1][j]\\) means hum \\(A[i-1]\\) delete kar rahe hai same with \\(edit[i][j-1]\\) meaning \\(B[j-1]\\) delete \\(edit[i-1][j-1]\\) matlab bro humne dono ko replace kar diya ek dusre se and both are updated</p>"},{"location":"DSAyy/dp/#base-cases","title":"Base Cases","text":"<p>Kuch baate sacch hoti hai Jaise, \\(edit[0][j] = j\\) -&gt; means \\(B[0..j]\\) ko empty karne ke liye j operations are needed. Similarly. \\(edit[i][0] = i\\)</p> <p>Bas bhai ab chalao for loop, sabke level nikalenge.</p> <pre><code>int editDistance(string A, string B){\n    int n = A.size(), B = B.size();\n    vector&lt;vector&lt;int&gt;&gt; edit(n+1, vector&lt;int&gt; (m+1, 0));\n    // sach baate\n    for (int i = 1; i &lt;= n; ++i) edit[i][0] = i;\n    for (int j = 1; j &lt;= m; ++j) edit[0][j] = j;\n\n    for (int i = 1; i &lt;= n; ++i){\n        for (int j = 1; j &lt;= m; ++j){\n            if (A[i-1] == B[j-1]) \n                edit[i][j] = edit[i-1][j-1];\n                // no extra edits needed\n            else {\n                edit[i][j] = 1 + min({\n                    edit[i-1][j], edit[i][j-1], edit[i-1][j-1]\n                });\n            }\n        }\n    }\n    return dp[n][m];\n}\n</code></pre> <p>Time and Space dono in this are \\(O(n\\times m)\\)</p>"},{"location":"DSAyy/dp/#repeating-subsequence","title":"Repeating Subsequence","text":""},{"location":"DSAyy/dp/#problem-kya-yap-kar-raha","title":"Problem kya yap kar raha","text":"<p>String A, check kar if its longest repeating subsequence is \\(\\geq\\) 2.  Repeating subsequence is basically repeating subsequence.</p> <p>Example: A = \\(abab\\), Output is 1 (subseq \\(ab\\) repeats)</p>"},{"location":"DSAyy/dp/#how-to-solve","title":"How to solve?","text":"<p>$$ \\text{Repeating subsequence (A) is LCS(A,A) but i } \\neq  j $$   Aur kuch bhi nahi.</p> <p>bas  $$ \\text{return dp[n][n] } \\geq 2 $$</p>"},{"location":"DSAyy/dp/#distinct-subsequences","title":"Distinct Subsequences","text":""},{"location":"DSAyy/dp/#problem-statement_1","title":"Problem Statement","text":"<p>Given 2 sequences A and B, count ways to form B as a subseq of A.</p> <p>Example: - A = rabbbit, B = rabbit, Output 3     - Basically all 3 <code>b</code> can be removed.</p>"},{"location":"DSAyy/dp/#karu-kaise","title":"Karu kaise?","text":"<p>Let \\(ways[j]\\) be ways to form \\(B[0...j]\\)  as a subseq of first <code>i</code> elements of A.  Isse 1D meh fit kar sakte if we update j from right to left, toh \\(ways[j-1]\\) hoga from previous <code>i</code> </p> <p>Toh the rishta would be  $$ ways[j] = ways[j] + ways[j-1] \\text{      if A[i-1] == B[j-1]} $$ warna \\(ways[j]\\) would remain 0, coz agar element hi same nai toh string kaise banega with those indexes. Note ki \\(ways[j-1]\\) humare previous i ke iteration se hoga, so we have already computed pehle ka.</p> <pre><code>int distSubseq(string A, string B){\n    int n = A.size(), m = B.size();\n    vector&lt;long long&gt; ways(m+1,0);\n    ways[0] = 1; //empty banane ke liye kya hi chahiye\n    for (int i = 1; i &lt;= n; ++i){\n        for (int j = m; j &gt;= 1; --j){\n            if (A[i-1] == B[j-1]){\n                ways[j] += ways[j-1];\n            }\n        }\n    }\n    return (int)ways[m];\n}\n</code></pre>"},{"location":"DSAyy/dp/#scramble-string","title":"Scramble String","text":""},{"location":"DSAyy/dp/#what-does-the-dog-say","title":"What does the dog say?","text":"<p>Given 2 strings, bata if the other string can be made by scrambling A. Now what the fuck is scrambling? B is scramble(A) if -&gt; A can be represented as a binary tree by recursively partitioninng into two non-substrings, and by swapping left and right children any number of times, we can get B. What the helly?</p> <p>Input: A= <code>we</code> and B = <code>we</code>  Ans = 1.</p>"},{"location":"DSAyy/dp/#bhai-mar-jau-meh","title":"Bhai mar jau meh?","text":"<p>Iske liye we use 3D dp. Whether  <code>A[i...i+len - 1]</code> can be scrambled into <code>B[j....j+len - 1]</code> Let <code>scramble[i][j][len]</code> be true if <code>A.substr(i,len)</code> can be scrambled into <code>B.substr(j,len</code></p>"},{"location":"DSAyy/dp/#hard-truth","title":"Hard Truth","text":"<p>Bhai pata nahi yaar ye scrambling shit kya hai Base Case: For length 1, <code>scramble[i][j][1] = (A[i] == B[j])</code>      Like bhai ek hi toh length hai, same string hi hogaya ye toh For each length \\(l\\) from 2 to n, for all <code>A.substr(i,l)</code> and <code>B.substr(j,l)</code> har ek split <code>k</code> try kar le - No swap: <code>scramble[i][j][l]</code> is true if \\(scramble[i][j][k] \\space \\&amp; \\space scramble[i][j][l-k]\\) meaning dono continuous partitions valid hai. - Swap: <code>scramble[i][j][l]</code> is true if <code>scramble[i][j+l-k][k]</code> and <code>scramble[i+k][j][l-k]</code> dono true hai Also quick check: If dono sorted are different, tab toh they cant scramble.</p> <p><pre><code>bool isScramble(string A, string B){\n    int n = A.size();\n    if (n != B.length()) return 0;\n    //quick sorted check\n    {\n        array&lt;int,256&gt; freq = {0};\n        for (char c : A) freq[(unsigned char)c]++;\n        for (char c : B) freq[(unsigned char)c]--;\n        for (int x : freq) if (x != 0) return 0;\n    }\n    static bool scramble[51][51][51];\n    memset(dp,false, sizeof(scramble));\n    // base case\n    for (int i = 0; i &lt; n; ++i)\n        for (int j = 0; j &lt; n; ++j)\n            scramlbe[i][j][1] = (A[i] == B[i]);\n    for (int len = 2; len &lt;= n; ++len){\n        for (int i = 0; i + len &lt;= n; ++i){\n            for (int j = 0; j + len &lt;= n; ++j){\n                for (int k = 1; k &lt; len; k++){\n                    if ((scramble[i][j][k] &amp;&amp; scramble[i+k][j+k][len-k]) || \n                        (scramble[i][j+len - k][k] &amp;&amp; scramble[i+k][j][len - k]){\n                        scramble[i][j][len] = 1;\n                        break;\n                        }\n                    )\n                }\n            }\n        }\n    }\n    return scramble[0][0][n] ? 1 : 0;\n}\n</code></pre> Time Complexity: \\(O(n^4)\\)</p>"},{"location":"DSAyy/dp/#wildcard-pattern-matching","title":"WildCard Pattern Matching","text":""},{"location":"DSAyy/dp/#problem-kya-hai","title":"Problem kya hai","text":"<p>Given 2 strings, find the wildcard pattern between them - <code>?</code> matches any single character - <code>*</code> matches any sequence of character This match must cover the entire string</p> <p>Return if A can be formed with the B pattern - A = <code>aa</code> and B = <code>a*</code> , then ans is 1 - A = <code>aab</code> and B = <code>c*a*b</code>, then output 0 hai</p>"},{"location":"DSAyy/dp/#karna-kaise-hai_1","title":"Karna kaise hai","text":"<p>Iske liye 2 pointer greedy karna padega with some backtracking for the <code>*</code> wala part. - If the character at B is <code>*</code>, remember uska position and current index in A, and try to match it with 0 chars first. - If there is a mismatch, then look for the previous <code>*</code>, since that can save us, and then advance the A pointer and try to match with more. - If the current pointer in B is <code>?</code> ya fir it matches A, then advance both the pointers - If A khatam hogaya, then skip the trailing <code>*</code> in B - If dono khatam, then ans is 1</p> <pre><code>bool isMatch(string A, string B){\n    int n = A.size(), m = B.size();\n    int i = 0, j = 0;\n    int last_star = -1, match_i = 0;\n    while (i &lt; n){\n        if (j &lt; m &amp;&amp; (B[j] == A[i] || B[i] == '?')) \n            i++,j++;\n        else if (j &lt; m &amp;&amp; B[j] == '*'){\n            last_star = j;\n            match_i = i;\n            j++;\n        }\n        else if (last_star != -1){\n            j = last_star + 1;\n            match_i++;\n            i = match_i;\n        }\n        else \n            return 0;\n    }\n    while (j &lt; m &amp;&amp; B[j] == '*') j++;\n    return (j == m)? 1: 0;\n}\n</code></pre>"},{"location":"DSAyy/dp/#pattern-matching-and","title":"Pattern Matching . and *","text":""},{"location":"DSAyy/dp/#problem-kya-hai_1","title":"Problem kya hai","text":"<p>Again pattern matching but, - <code>.</code> means atleast ek element hai here - <code>*</code> ek element nahi bhi hoga toh chalega Example: match(<code>aa</code>, <code>.*</code>) is 1, but match(<code>aa</code>,<code>.</code>) is 0.</p>"},{"location":"DSAyy/dp/#kaise-karna-hai_1","title":"Kaise karna hai","text":"<p>Yaha we finally use dynamic programming. <code>match[i][j]</code> means <code>a[0...i-1]</code> matches <code>b[0..j-1]</code> But isse bhi optimize karenge for only two rows.</p>"},{"location":"DSAyy/dp/#rishte","title":"Rishte","text":"<ul> <li>If <code>B[j-1]</code> is <code>.</code> or <code>a[i-1]</code> matches one character, tab <code>match[i][j] = match[i-1][j-1]</code></li> <li>If <code>B[j-1]</code> is <code>*</code>, tab it can match zero or more previous element:<ul> <li>Zero occurence: \\(match[i][j] \\space | \\space  match[i][j-2]\\)</li> <li>One or more: If <code>A[i-1]</code> matched <code>B[j-2]</code> or <code>B[j-2]</code> is <code>.</code>, then <code>match[i][j]</code> |= <code>match[i-1][j]</code></li> </ul> </li> <li>else <code>match[i][j] = 0</code></li> </ul>"},{"location":"DSAyy/dp/#truth","title":"Truth","text":"<ul> <li><code>match[0][0]</code> = 1 (empty toh match hoga hi)</li> <li><code>match[0][j]</code> = 1 if <code>B[0...j-1]</code> can represent empty </li> <li><code>match[i][0] = 0</code> for i &gt; 0 coz non-empty match nahi kar sakta empty se</li> </ul> <p>The less optimized one but easier to understand: <pre><code>/*\n   Regex-like pattern match for\n     .  = exactly one arbitrary character\n     *  = zero or more copies of the PREVIOUS pattern symbol\n   dp[i][j]  == true  \u21d4   A[0 .. i-1] matches  B[0 .. j-1]\n   (so the table has   (n+1) \u00d7 (m+1)   entries)\n*/\nbool isMatch2D(const string&amp; A, const string&amp; B)\n{\n    int n = A.size(), m = B.size();\n    vector&lt;vector&lt;bool&gt;&gt; dp(n + 1, vector&lt;bool&gt;(m + 1, false));\n    // \u278a empty pattern vs. empty text\n    dp[0][0] = true;\n    // \u278b first row: empty text vs. longer &amp; longer pattern\n    //    Only a chain like  x* y* z*  can match emptiness\n    for (int j = 2; j &lt;= m; ++j)\n        if (B[j - 1] == '*')\n            dp[0][j] = dp[0][j - 2];\n    // \u278c fill the whole grid\n    for (int i = 1; i &lt;= n; ++i)\n    {\n        for (int j = 1; j &lt;= m; ++j)\n        {\n            char pc = B[j - 1];          // current pattern symbol\n            if (pc != '*')               // case 1: normal char or '.'\n            {\n                bool same = (pc == '.' || pc == A[i - 1]);\n                dp[i][j] = same &amp;&amp; dp[i - 1][j - 1];\n            }\n            else                         // case 2: we\u2019re at a '*'\n            {\n                //   pc == '*'  \u2190 it always modifies B[j-2]\n                //   let prev = B[j - 2]\n                // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                // zero copies of prev*\n                bool zero      = dp[i][j - 2];\n                // one-or-more copies  \u21d2  prev must match A[i-1]\n                bool oneOrMore = false;\n                char prevPat   = B[j - 2];\n                if (prevPat == '.' || prevPat == A[i - 1])\n                    oneOrMore = dp[i - 1][j];\n                dp[i][j] = zero || oneOrMore;\n            }\n        }\n    }\n    return dp[n][m];\n}\n</code></pre> The optimized one: <pre><code>bool isMatch(string A, string B){\n    int n = A.size(), m = B.size();\n    vector&lt;bool&gt; prev(m+1, false), cur(m+1, false);\n    prev[0] = true;\n    for (int j = 1; j &lt;= m; ++j){\n        if (B[j-1] == '*' &amp;&amp; j &gt;= 2)\n            prev[j] = prev[j-2];\n        else \n            prev[j] = false;\n    }\n    for (int i = 1; i &lt;= n; ++i){\n        cur[0] = false;\n        for (int j = 1; j &lt;= m; ++j){\n            if (B[j-1] == '.' || B[j-1] == A[i-1])\n                cur[j] = prev[j-1];\n            else if (B[j-1] == '*'){\n                bool matchZero = (j &gt;= 2) ? cur[j-2] : false;\n                bool matchOneOrMore = (j &gt;= 2 &amp;&amp; \n                    (B[j-2] == '.' || B[j-2] == A[i-1])\n                    )? \n                    prev[j] : false;\n                cur[j] = matchZero || matchOneOrMore;\n            }\n            else cur[j] = false;\n        }\n        swap(cur,prev);\n    }\n    return prev[m] ? 1 : 0;\n}\n</code></pre></p>"},{"location":"DSAyy/dp/#length-of-longest-subsequence","title":"Length of Longest Subsequence","text":""},{"location":"DSAyy/dp/#problem-yap","title":"Problem yap","text":"<p>Given array A, find length of longest sequence whihc is strictly increasing  then strictly decreasing. (mountain peak type shit)</p> <p>Example: - A = <code>[1,11,2,10,4,5,2,1]</code>, output is 6 (<code>1,2,10,4,2,1</code>)</p>"},{"location":"DSAyy/dp/#how","title":"How????","text":"<p>So this mountain thing is called bitonic subsequence. - For each i, compute <code>lis[i]</code> which is the length of longest increasing subsequence ending at i. - then also compute <code>lds[i]</code> which is length of longest decreasing subsequence starting at i - Ab bas har ek index pe compute dono ka sum  \\(lis[i] + lds[i] - 1\\)</p> <pre><code>int longSubseq(vector&lt;int&gt; &amp;A){\n    int n = A.size();\n    if (n == 0) return 0;\n    vector&lt;int&gt; lis(n,1);\n    for (int i = 0; i &lt; n; ++i)\n        for (int j = 0; j &lt; i; ++j)\n            if (A[j] &lt; A[j])\n                lis[i] = max(lis[i], lis[j] + 1);\n    vector&lt;int&gt; lds(n,1);\n    for (int i = n-1; i &gt;= 0; --i)\n        for (int j = i+1; j &lt; n; ++j)\n            if (A[j] &lt; A[i])\n                lds[i] = max(lds[i], lds[j] + 1);\n    int ans = 0;\n    for (int i = 0; i &lt; n; ++i) \n        ans = max(ans, lis[i] + lds[i] - 1);\n    return ans;\n}\n</code></pre>"},{"location":"DSAyy/dp/#smallest-subsequence-given-the-primes","title":"Smallest subsequence given the primes.","text":""},{"location":"DSAyy/dp/#sexy-ass-statement","title":"Sexy ass statement","text":"<p>Given 3 prime numbers, and an integer D, find the first smallest D positive numbers which only have A,B,C, or a combination of them as their prime factors.</p> <p>Input: A,B,C,D, Output: Array of size D</p> <ul> <li>A= 2, B = 3, C = 5, D = 5<ul> <li>the output is <code>2,3,4,5,6</code></li> </ul> </li> </ul>"},{"location":"DSAyy/dp/#how-to-do-this-shit","title":"How to do this shit.","text":"<p>What they ask is <code>Ugly Numbers</code> (numbers with only prime as their factors) We use 3 pointers, with a min-merge approach - Maintain an array <code>res</code> initialized with the sequence {1} - For each index, multiple previous seq elements by A,B,C and pick the smallest new candidate. - Increment pointers which produced the candidate to avoid duplicates. $$ res[next] = min(res[i_1]\\times A,res[i_2]\\times B, res[i_3]\\times C) $$</p> <pre><code>vector&lt;int&gt; subseq(int A, int B, int C, int D){\n    vector&lt;long long&gt; primes = {(long long)A,(long long)B, (long long)C};\n    sort(primes.begin(),primes.end());\n    long long p1 = primes[0], p2 = primes[1], p3 = primes[2];\n    vector&lt;unsigned long long&gt; res(D+1);\n    res[0] = 1ull;\n    int i1 = 0, i2 =0, i3 = 0;\n    for (int idx = 1; idx &lt;= D; idx++){\n        unsigned long long \n            nextA = res[i1] * p1,\n            nextB = res[i2] * p2,\n            nextC = res[i3] * p3;\n        unsigned long long val = min({nextA, nextB, nextC});\n        res[idx] = val;\n        if (val == nextA) i1++;\n        if (val == nextB) i2++;\n        if (val == nextC) i3++;\n    }\n    vector&lt;int&gt; ans;\n    for (int k = 1; k &lt;= D; ++k){\n        ans.push_back((int)res[k]);\n    }\n    return ans;\n}\n</code></pre>"},{"location":"DSAyy/dp/#largest-area-of-rectangle-with-permutations","title":"Largest Area of Rectangle with Permutations","text":""},{"location":"DSAyy/dp/#what-does-this-bitch-yap","title":"What does this bitch yap","text":"<p>Given a binary grid A of \\(N \\times M\\), find the area of the largest rectangle containing only 1s.  We are allowed to permute the columns of the matrix in any order.</p> <p>Example $$ A = [[1,0,1],[0,1,0],[1,0,0]] $$ The output is 2</p>"},{"location":"DSAyy/dp/#how-to-do-this","title":"How to do this?","text":"<ul> <li>For each cell (i,j), compute <code>H[i][j]</code> = number of consecutive 1's ending at (i,j) upto row i.</li> <li>For each row, treat <code>H[i]</code> as histogram of column heights, and since <code>H[i]</code> can be permuted, sort <code>H[i]</code> in descending order.</li> <li>For each width k (the k largest column heights), the maximal rectangle is \\(height \\times width = H[i][k-1] \\times k\\) </li> <li>Take the best over all i and k. Example dry run: <pre><code>A\nrow0  1 0 1 1 0 1\nrow1  1 1 1 1 1 1\nrow2  1 1 1 0 1 1\nrow3  0 1 1 1 1 0\nrow4  1 1 1 1 1 1\n</code></pre></li> </ul> row i formula per column j H[i] 0 first row \u2192 copy <code>A</code> 1 0 1 1 0 1 1 if <code>A[1][j]==1</code> then <code>1+H[0][j]</code> else 0 2 1 2 2 1 2 2 same rule 3 2 3 0 2 3 3 same rule 0 3 4 1 3 0 4 same rule 1 4 5 2 4 1 row original H[i] after sort \u2193 <code>k</code> height \u00b7 width 0 1 0 1 1 0 1 1 1 1 0 0 0 1 \u2192 1 2 \u2192 2 3 \u2192 3 3 1 2 1 2 2 1 2 2 2 2 2 1 1 1 \u2192 2 2 \u2192 4 3 \u2192 6 4 \u2192 8 5 \u2192 5 6 \u2192 6 8 2 3 2 3 0 2 3 3 3 3 2 2 0 1 \u2192 3 2 \u2192 6 3 \u2192 9 4 \u2192 8 5 \u2192 10 10 3 0 3 4 1 3 0 4 3 3 1 0 0 1 \u2192 4 2 \u2192 6 3 \u2192 9 4 \u2192 4 9 4 1 4 5 2 4 1 5 4 4 2 1 1 1 \u2192 5 2 \u2192 8 3 \u2192 12 4 \u2192 8 12 <p>Hence the largest we find is \\(4 \\times 3 = 12\\) <pre><code>int maximalRectangle(vector&lt;vector&lt;int&gt;&gt; &amp; A){\n    int N = A.size();\n    if (N == 0) return 0;\n    int M = A[0].size();\n    // building H matrix\n    vector&lt;vector&lt;int&gt;&gt; H(N, vector&lt;int&gt; (M,0));\n    for (int j = 0; j &lt; M; ++j){\n        H[0][j] = A[0][j];\n        // starting meh consecutive ones is the 1 if the value at that ind is 1\n    }\n    for (int i = 1; i &lt; N; ++i)\n        for (int j = 0; j &lt; M; ++j){\n            if (A[i][j] == 1)\n                H[i][j] = H[i-1][j] + 1;\n            else H[i][j] = 0;\n        }\n    int ans = 0;\n    for (int i = 0; i &lt; N; ++i){\n        vector&lt;int&gt; row = H[i];\n        sort(row.rbegin(),row.rend());\n        for (int k = 1; k &lt;= M; ++k){\n            int height = row[k-1];\n            int area = height * k;\n            ans = max(ans, area);\n        }\n    }\n    return ans;\n}\n</code></pre></p>"},{"location":"DSAyy/dp/#tiling-with-dominoes","title":"Tiling with Dominoes","text":""},{"location":"DSAyy/dp/#problem-statement_2","title":"Problem Statement","text":"<p>Given integer A, find total ways to tile a \\(3 \\times A\\) board with \\(2 \\times 1\\) dominoes. Return answer % \\(10^9 + 7\\).</p> <p>Example:  - A = 2, Output = 3 - A = 1, Output = 0</p>"},{"location":"DSAyy/dp/#maths-behind-this","title":"Maths behind this","text":"<p>Let <code>f(n)</code> be the number of ways to tile a \\(3 \\times n\\) board. - <code>f[0]</code> = 1. (empty board) - <code>f[1]</code> = 0 (cannot be completely tiled) - <code>f[2]</code> = 3 - <code>f[3]</code> = 0. (odd ke liye toh impossible hai completely tile karna, always some remainder) - For n \\(\\geq\\) 4, even n, \\(f[n] = 4 \\times f[n-2] - f[n-4]\\) - For odd n, <code>f[n]</code> = 0</p> <pre><code>int domino(int A){\n    const int MOD = 1e9 + 7;\n    vector&lt;int&gt; f(A+1,0);\n    if (A &gt;= 0) f[0] = 1;\n    if (A &gt;= 1) f[1] = 0;\n    if (A &gt;= 2) f[2] = 1;\n    if (A &gt;= 3) f[3] = 0;\n    for (int n = 4; n &lt;= A; ++n){\n        if (n &amp; 1) f[n] = 0;\n        else {\n            long long x = (4LL * f[n-2]) % MOD;\n            x = (x - f[n-4] + MOD) % MOD;\n            f[n] = (int)x;\n        }\n    }\n    return f[A];\n}\n</code></pre>"},{"location":"DSAyy/dp/#paint-house","title":"Paint House","text":"<p>N houses in a row, each can be painted with RGB.  Painting each house with a certain color has a given cost, represented by \\(n \\times 3\\) matrix A, where <code>A[i][j]</code> is the cost to paint the house <code>i</code> with cost <code>j</code>  (0 -&gt; red, 1-&gt; blue, 2-&gt; green). Paint such that - No two adjacent houses have the same color. - Minimize the total painting cost. Input \\(N\\times 3\\) matrix, output -&gt; min cost to paint all. Example: $$     A = \\begin{matrix} 1 &amp;&amp; 2  &amp;&amp; 3\\ 10 &amp;&amp; 11 &amp;&amp; 12 \\end{matrix} $$ Output: 12 Paint 0 with R, 1 with G: 1 + 11 = 12</p>"},{"location":"DSAyy/dp/#how-to-do-this-painting","title":"How to do this painting","text":"<p>Let <code>cost[i][c]</code> be the min cost to paint houses 0 to i with house i painted color c. But since each row only depends on the previous,, we can just use 2 arrays.</p> <p>$$ cost[i][0] = A[i][0] + min(cost[i-1][1], cost[i-1][2]) $$ $$ cost[i][1] = A[i][1] + min(cost[i-1][0], cost[i-1][2]) $$ $$ cost[i][2] = A[i][2] + min(cost[i-1][0], cost[i-1][1]) $$ Iss se simple dp ho nahi sakta Thoda simple karne ke liye let <code>prev_cost[c]</code> be cost of painting the previous house with color c. <code>prev_cost[c] = cost[i-1][c]</code></p> <pre><code>int minCost(vector&lt;vector&lt;int&gt;&gt; &amp;A){\n    int N = A.size();\n    if (N == 0) return 0;\n    long long prev_cost[3];\n    for (int c = 0; c &lt; 3; ++c) \n        prev_cost[c] = A[0][c];\n    for (int i = 1; i &lt; N; ++i){\n        long long cost[3];\n        cost[0] = A[i][0] + min(prev_cost[1], prev_cost[2]);\n        cost[1] = A[i][1] + min(prev_cost[0], prev_cost[2]);\n        cost[2] = A[i][2] + min(prev_cost[0], prev_cost[1]);\n        for (int c = 0; c &lt; 3; ++c) prev_cost[c] = cost[c];\n    }\n    long long ans = min({prev_cost[0], prev_cost[1], prev_cost[2]});\n    return (int)ans;\n}\n</code></pre>"},{"location":"DSAyy/dp/#ways-to-decode","title":"Ways to decode","text":"<p>Given an encoded string <code>A</code> consisting of digits. - 'A' = 1, 'B' = 2 ... 'Z' = 26 find the total number of ways of decoding A modulo \\(10^9 + 7\\).</p> <p>Input: String A, Output: total number of decoding ways.</p> <p>Example: - A = '8', Output = 1 (\"H\") - B = '12', Output = 2 (\"AB\", \"L\")</p>"},{"location":"DSAyy/dp/#karna-kaise-hai_2","title":"Karna kaise hai","text":"<p>Let <code>ways[i]</code> be number of ways to decode <code>A[0...i]</code> (first i characters)</p> <p>Toh iss ke rishte kuch aise honge: - If \\(A[0] = '0'\\), single digit is valid, add <code>ways[i-1]</code> - If <code>A[i-2,i-1]</code> form a valid 2 digit number between 10 and 26, add <code>ways[i-2]</code></p> <p>Base cases: - \\(ways[0] = 1\\) (empty string banane ka there is only one way) - \\(ways[1] = 1 \\text{ if A[0] } \\neq '0', \\text{ else 0}\\)</p> <pre><code>int numDecodings(string A){\n    int n = A.length();\n    const int MOD = 1e9 + 7;\n    if (n == 0) return 0;\n    vector&lt;int&gt; ways(n+1,0);\n    ways[0] = 1;\n    ways[1] = (A[0] != '0')? 1 : 0;\n    for (int i = 2; i &lt;= n; ++i){\n        char c1 = A[i-1], c0 = A[i-2];\n        if (c1 != '0')\n            ways[i] = (ways[i] + ways[i-1]) % MOD;\n        if (c0 == '1' || (c0 == '2' &amp;&amp; c1 &lt;= '6'))\n            ways[i] = (ways[i] + ways[i-2]) % MOD;\n    }\n    return ways[n];\n}\n</code></pre>"},{"location":"DSAyy/dp/#stairs","title":"Stairs","text":""},{"location":"DSAyy/dp/#legendary-beginner-problem","title":"Legendary beginner problem","text":"<p>You are climbing a staircase with A steps. You can climb either 1 or 2 steps; How many distinct ways can you reach the top?</p> <p>Input: A = 2, Output = 2 (<code>[1,1],[2]</code>)</p>"},{"location":"DSAyy/dp/#karna-kaise-hai_3","title":"Karna kaise hai","text":"<p>Let \\(waysToStep[n]\\) be the number of ways to reach step n</p> <p>$$     waysToStep[i] = waysToStep[i-1] + waysToStep[i-2] $$ Some facts: \\(waysToStep[0] = 1\\) (1 way to stay at the bottom) \\(waysToStep[1] = 1\\) (climb one step)</p> <pre><code>int climbStairs(int A){\n    if (A &lt;= 1) return 1;;\n    int prev = 1, curr = 2;\n    for (int i = 3; i &lt;= A; ++i) {\n        int next = prev + curr;\n        prev = curr;\n        curr = next;\n    }\n    return curr;\n}\n</code></pre>"},{"location":"DSAyy/dp/#longest-increasing-subsequence","title":"Longest Increasing Subsequence","text":""},{"location":"DSAyy/dp/#problem-kya-hai_2","title":"Problem kya hai","text":"<p>Given array of integers A, find the length of Longest Increasing Subsequence.</p> <p>Example: - <code>A = [1,2,1,5]</code> Output: 3 (LIS = <code>[1,2,5]</code> )</p>"},{"location":"DSAyy/dp/#karna-kaise-hai_4","title":"Karna kaise hai","text":"<p>BINARY SEARCH BITCH - Maintain a list <code>tail</code> where <code>tail[i]</code> is the smallest possible tail value of an increasing subsequence of length <code>i+1</code> - <code>tail[i]</code> is the smallest possible value that can end a increasing subsequence of length <code>i+1</code>  - For each x in A:     - Use lower_bound to find the first element in tail \\(\\geq\\) x.     - If none, append x (increase the LIS length)     - Otherwise, replace it. (keep tail as small as possible for future extensions)         - the older value was bigger than x, and it wouldn't be a valid increasing subsequence ending at <code>i</code> so we replace the bigger value withh this new pookie. Length of the tail at the end is the ans</p> <pre><code>int lis(vector&lt;int&gt; &amp;A){\n    vector&lt;int&gt; tail;\n    for (int x : A){\n        auto it = lower_bound(tail.begin(),tail.end(), x);\n        // find first el &gt;= x\n        if (it == tail.end())\n            tail.push_back(x);\n        else \n            *it = x;\n    }\n    return tails.size();\n}\n</code></pre>"},{"location":"DSAyy/dp/#intersecting-chords-in-a-circle","title":"Intersecting chords in a circle","text":"<p>Given an integer \\(A\\) return the number of ways to draw A chords in a circle with \\(2A\\) points, such that no two chords intersect. Two ways are different if atleast one chord is present in one way but not the other. Return modulo \\(10^9 + 7\\)</p> <p>Example: - A = 1, Output = 1 - A = 2, Output = 2</p>"},{"location":"DSAyy/dp/#how-tho","title":"How tho","text":"<p>The number of ways to draw A non-intersecting chords on 2A points on a circle is the A-th Catalan number. $$ C_0 = 1, \\space \\space C_n = \\sum_{i=0}^{n-1} C_i \\times C_{n-1 - i} $$ where \\(C_n\\) is the number of valid chord drawings with n chords.</p> <pre><code>int chordCut(int A){\n    const int MOD = 1e9 + 7;\n    vector&lt;long long&gt; C(A+1, 0);\n    C[0] = 1;\n    for (int n = 1; n &lt;= A; ++n){\n        long long ways = 0;\n        for (int i = 0; i &lt; n; ++i){\n            ways = (ways + C[i] * C[n-1-i]) % MOD;\n        }\n        C[n] = ways;\n    }\n    return (int)C[A];\n}\n</code></pre>"},{"location":"DSAyy/dp/#birthday-bombs","title":"Birthday Bombs","text":""},{"location":"DSAyy/dp/#problem","title":"Problem","text":"<p>Tengu has N friends. Each friend \\(i\\) has a positive strength \\(B[i]\\) and can kick tengu any number of times. Tengu has pain resistance limit A. Find lexicographically smallest array of max pos length of friend indices, where each friend index can appear any number of times, such that their sum of strengths is \\(\\leq\\) A.</p>"},{"location":"DSAyy/dp/#how_1","title":"How","text":"<ul> <li>Max num of kicks: \\(M = \\frac{A}{w_{min}}\\)   where \\(w_{min}\\) is the min val in B.</li> <li>At each kick pos, to keep ans smallest, try each friend in asc order and pick the lowest index friend whose cost allows enough resistance for remaining M-1 kicks, all possibly using the cheapest friend.</li> <li>After choosing, subtract from capacity and continue.</li> </ul> <pre><code>vector&lt;int&gt; smallKicks(int A, vector&lt;int&gt;&amp; B){\n    int N = B.size();\n    int w_min = *min_element(B.begin(),B.end());\n    int M = A/w_min;\n    if (M == 0) return {};\n    vector&lt;int&gt; ans;\n    long long cap = A; // remaining capacity\n    for (int pos = 0; pos &lt; M; ++pos){\n        int rem = M - pos - 1;\n        for (int i = 0; i &lt; N; ++i){\n            long long cost_i = B[i];\n            long long needed_for_rest = 1LL* rem * w_min;\n            if (cost_i + needed_for_rest &lt;= cap){\n                ans.push_back(i);\n                cap -= cost_i;\n                break;\n            }   \n        }\n    }\n    return ans;\n}\n</code></pre>"},{"location":"DSAyy/dp/#jump-game-array","title":"Jump Game Array","text":""},{"location":"DSAyy/dp/#problem_1","title":"Problem","text":"<p>Given array A with non-neg int, you are at index 0. Each element <code>A[i]</code> is the max jump len from pos i. Determine if you can reach the last index.</p> <p>Example - \\(A = [2,3,1,1,4]\\) , Output = 1 - \\(A = [3,2,1,0,4]\\) , Output = 0</p>"},{"location":"DSAyy/dp/#how_2","title":"How:","text":"<p>Keep track of <code>maxReach</code> index, like the farthest we can reach - for each index i, if i &gt; maxReach, we are stuck, return 0 - warna update maxReach and move on</p> <pre><code>int canJump(vector&lt;int&gt; &amp;A){\n    int n = A.size();\n    long long maxReach = 0;\n    for (int i = 0; i &lt; n; ++i){\n        if (i &gt; maxReach) return 0;\n        maxReach = max(maxReach, (long long i) + A[i]);\n        if (maxReach &gt;= n-1) return 1;\n    }\n    return 1;\n}\n</code></pre>"},{"location":"DSAyy/dp/#min-jumps-array","title":"Min Jumps Array","text":""},{"location":"DSAyy/dp/#problem_2","title":"Problem","text":"<p>Given array A with non-neg int, you are at index 0. Each <code>A[i]</code> represents the max jump length from that pos. Return the min number of jumps required to reach the last index. If not pos, return -1.</p>"},{"location":"DSAyy/dp/#how_3","title":"How","text":"<p>Use a greedy BFS - <code>current_end</code> : the farthest index we can reach with current jumps - <code>furthest</code> : farthest we can reach with one more jump - for every i in \\([0,current\\_end]\\) , update furthest to the farthest you can go. - when i reaches current_end, increment jump count, and extend curr_end to furthest. - if current_end cannot be extended, return -1 <pre><code>int jump(vector&lt;int&gt; $A){\n    int n = A.size();\n    if (n &lt;= 1) return 0;\n    if (A[0] == 0) return -1;\n    int jumps = 0, current_end = 0, furthest = 0;\n    for (int i = 0; i+1 &lt; n; ++i){\n        furthest = max(furthest, i + A[i]);\n        if (i == current_end){\n            jumps++;\n            current_end = furthest;\n            if (current_end &gt;= n-1) return jumps;\n            if (current_end == i) return -1;\n        }\n    }\n    return (current_end &gt;= n -1)? jumps : -1;\n}\n</code></pre></p>"},{"location":"DSAyy/dp/#longest-arithmetic-progression","title":"Longest Arithmetic Progression","text":""},{"location":"DSAyy/dp/#problem-statement-ass","title":"Problem statement (ass)","text":"<p>Given int arr A of size N, find len of longest AP in A. AP is a seq where consec elements ka diff is same.</p> <p>Example: - <code>A = [3,6,9,12]</code> Output: 4 - <code>A = [9,4,7,2,10]</code> Output: 3 (4,7,10)</p>"},{"location":"DSAyy/dp/#kya-kyu-kaise","title":"Kya Kyu Kaise","text":"<ul> <li>Let <code>ap[i][j]</code> be the len of longest AP ending at i,j</li> <li>For each j &gt; i, try to find a pehle ka index <code>k</code> such that <code>A[k]</code> , <code>A[i]</code>, <code>A[j]</code> form an AP.</li> <li>Agar waise kuch exists, se<code>ap[i][j]</code> = <code>ap[k][i] + 1</code> (matlab AP goes on), warna <code>ap[i][j] = 2</code> (atleast 2 number toh hai ye dono bhai)</li> <li>Use hashmap for finding last occurence</li> </ul> <pre><code>int longestAP(vector&lt;int&gt; &amp;A){\n    int n = A.size();\n    if (n &lt;= 2) return n;\n    map&lt;int,int&gt; occ;\n    vector&lt;vector&lt;int&gt;&gt; ap(n+1, vector&lt;int&gt;(n+1,0));\n    for (int i = 0; i &lt; n; ++i){\n        for (int j = i+1; j &lt; n; ++j){\n            int x = 2*A[i] - A[j]; // aise we find prev element\n            if (occ.find(x) != occ.end()){\n                // ap ki legacy goes on\n                ap[i][j] = max(ap[i][j], 1 + ap[mp[x]][i]);\n            }\n            else {\n                ap[i][j] = 2;\n            }\n            ans = max(ans,ap[i][j]);\n        }\n        mp[A[i]] = i;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"DSAyy/dp/#n-digit-numbers-with-digit-sum-s","title":"N digit numbers with digit sum S","text":""},{"location":"DSAyy/dp/#problem-statement_3","title":"Problem Statement","text":"<p>Given 2 integers N and S, find out the num of N-digit numbers whose digit sum to S.  Note valid num dont have leading zeroes. Return ans \\(modulo \\space 10^9 + 7\\)</p> <p>Example: N = 2, S = 4, Output = 4 (numbers = 13,22,31,40)</p>"},{"location":"DSAyy/dp/#kaise","title":"Kaise?","text":"<p>Let \\(dp[sum]\\) be the num of ways to get sum <code>sum</code> with a fixed number of digits so far. First digit ke liye we can only put 1-9. Uske aage we can put 0-9 For each pos, update all possible digit sum using the prev position ka possibilities.</p> <pre><code>int digitSum(int N, int S){\n    const int MOD = 1e9 + 7;\n    vector&lt;int&gt; dp(S+1,0), next_dp(S+1,0);\n    // first digit wala base case\n    for (int d=  1; d &lt;= 9; ++d) \n        if (d &lt;= S) dp[d] = 1;\n    for (int pos = 2; pos &lt;= N; ++pos){\n        fill(next_dp.begin(),next_dp.end(), 0);\n        for (int sum = 0; sum &lt;= S; ++sum){\n            if (dp[sum] == 0) continue; // we have nothing to add\n            for (int d = 0; d &lt;= 9; ++d){\n                if (sum + d &gt; S) break;\n                // jitne bhi next sum possible hai, sab ke ways add karde\n                next_dp[sum + d] = (next_dp[sum + d] + dp[sum]) % MOD; \n            }\n        }\n        // calculations update kar de\n        dp.swap(next_dp);\n    }\n    return dp[S];\n}\n</code></pre>"},{"location":"DSAyy/dp/#shortest-common-superstring","title":"Shortest Common Superstring","text":""},{"location":"DSAyy/dp/#problem-kya-yap-kar-raha_1","title":"Problem kya yap kar raha","text":"<p>Given a set of strings A of len N, return len of shortest string that contains all string in A as substrings.</p> <p>Example: - \\(A = ['aaaa', 'aa'],\\space  Output = 4\\)  (superstring : \"aaaa\") - <code>A = [abcd,cdef,fgh,de]</code> Output: 8 (superstring : \"abcdefgh\")</p>"},{"location":"DSAyy/dp/#how-the-fuck","title":"How the fuck","text":"<p>Pehle toh remove any string that is a substring of another For all pairs <code>i,j</code> precompute maximum suffix-prefix ka overlap between <code>A[i]</code> and <code>A[j]</code>. Ab let <code>dp[mask][last]</code> be the min len superstring for set of strings mask, ending at string <code>last</code>. Transition: For every mask, for every mask, try adding any <code>nxt</code> not in the mask The cost to add <code>A[nxt]</code> after <code>A[last]</code> is  $$ |A[nxt]| - overlap[last][nxt] $$ Matlab length of <code>A[nxt]</code> - overlap between <code>A[last]</code> and <code>A[nxt]</code> Then the answer would be min of <code>dp[all-used][last]</code></p> <p>Iska code thoda heavy hai <pre><code>int computeOverlap(string a, string b){\n    int maxLen = min(a.size(),b.size());\n    for (int k = maxLen, k &gt; 0; --k){\n        if (a.substr(a.size()-k,k) == b.substr(0,k)){\n            return k;\n            // agar a ke last k matches b ke first k, toh its better to join them\n        }\n    }\n}\n\nint minComSups(vector&lt;string&gt; &amp;A){\n    int n = A.size();\n    if (n == 0) return 0;\n    // remove substrings coz time na waste kar yaar\n    vector&lt;bool&gt; keep(n,true);\n    for (int i = 0; i &lt; n; ++i){\n        if (!keep[i]) continue;\n        for (int j = 0; j &lt; n; ++j){\n            if (i == j || !keep[j]) continue;\n            if (A[i].find(A[j]) != string::npos)\n                keep[j] = 0;\n            else if (A[j].find(A[i]) != string::npos){\n                keep[i] = false;\n                break;\n            }\n        }\n    }\n    vector&lt;string&gt; strs;\n    for (int i = 0; i &lt; n; ++i) if (keep[i]) strs.push_back(A[i]);\n    A.swap(strs); // cleaned A by removing faaltu ke subtrs\n    // precompute overlap\n    vector&lt;vector&lt;int&gt;&gt; overlap(n, vector&lt;int&gt;(n,0));\n    for (int i = 0; i &lt; n; ++i){\n        for (int j = 0; j &lt; n; ++j){\n            if (i == j) continue;\n            overlap[i][j] = computeOverlap(A[i],A[j]);\n        }\n    }\n    // ab finally dp\n    int FULL = 1 &lt;&lt; n, INF = 1e9;\n    vector&lt;vector&lt;int&gt;&gt; dp(FULL, vector&lt;int&gt;(n,INF));\n    // min com supstr of A[i] ending at i is A[i] bhai duh\n    for (int i = 0; i &lt; n; ++i) dp[i &lt;&lt; i][i] = A[i].length();\n\n    for (int mask = 0; mask &lt; FULL; ++mask){\n        for (int last = 0; last &lt; n; ++last){\n            if (!(mask &amp; (1 &lt;&lt; last))) continue;\n            // agar last pehle compute kar rakha then continue\n            int curLen = dp[mask][last];\n            if (curLen == INF) continue; // not computed, abhi bhi default value hai\n            int rem = (~mask) &amp; (FULL - 1);\n            for (int nxt = 0; nxt &lt; n; ++nxt){\n                if (!(rem &amp; (1 &lt;&lt; nxt))) continue; // nxt already in mask\n                int add = (int)A[nxt].size() - overlap[last][nxt];\n                int newMask = mask | (1 &lt;&lt; nxt);\n                dp[newMask][nxt] = min(dp[newMask][nxt],curLen + add);\n            }\n        }\n    }\n    int ans = INF, finalMask = FULL - 1;\n    for (int last = 0; last &lt; n; ++last)\n        ans = min(ans, dp[finalMask][last]);\n    return ansl\n}\n</code></pre></p>"},{"location":"DSAyy/dp/#ways-to-color-a-3-x-n-board","title":"Ways to color a 3 x N Board.","text":""},{"location":"DSAyy/dp/#problem_3","title":"Problem","text":"<p>Given 3xA board, find ways to color it using atmost 4 colors such that no two baaju wala cells have the same color. Return ans modulo \\(10^9 + 7\\)</p> <p>Example:  - A = 1, ans = 36 - A = 2, ans = 588</p>"},{"location":"DSAyy/dp/#how-the-fuck_1","title":"How the fuck","text":"<p>DP with State Compression Each column can be colored in \\(4 \\times 3 \\times 3 = 36\\) ways. Choose colors for top, middle, and bottom. All different from adjacent vertically. Let <code>patterns[i]</code> mean i-th valid color pattern for a column. Let <code>compatList[i]</code> as the set of prev column patterns compatible with i (no color repeats in any row) Let <code>dp[i]</code> be the number of ways so far if the rightmost column uses the pattern i. So the transition would be: $$ nextDP[i] = \\sum_{j \\in compatList[i]} dp[j] $$ So pehle, Gemerate all 36 valid column colorings  Now for each pattern, build a list of compatible previous patterns Then bas ways add karde of all that are compatible</p> <pre><code>const int MOD = 1e9 + 7;\nvector&lt;array&lt;int,3&gt;&gt; buildAllPatterns(){\n    vector&lt;array&lt;int,3&gt;&gt; patterns;\n    for (int c0 = 0; c0 &lt; 4; ++c0){\n        for (int c1 = 0; c1 &lt; 4: ++c1){\n            if (c1 == c0) continue; // valid nahi hai\n            for (int c2 = 0; c2 &lt; 4: ++c2){\n                if (c2 == c1) continue;\n                patterns.push_back({c0,c1,c2});\n            }\n        }\n    }\n}\n\nvector&lt;vector&lt;int&gt;&gt; buildCompat(vector&lt;array&lt;int,3&gt;&gt; &amp;patterns){\n    int M = patterns.size();\n    vector&lt;vector&lt;int&gt;&gt; compatList(M);\n    for (int i = 0; i &lt; M; ++i){\n        for (int j = 0; j &lt; M; ++j){\n            bool ok = 1;\n            for (int r = 0; r &lt; 3; ++r){\n                //check the rows incase adj nikale toh not okk\n                if (patterns[i][c] == patterns[j][c]){\n                    ok = 0;\n                    break;\n                }\n            }\n            if (ok) compatList[i].push_back(j);\n        }\n    }\n    return compatList;\n}\n\nint color(int A){\n    int N = A:\n    if (N &lt;= 0) return 0;\n    vector&lt;array&lt;int,3&gt;&gt; patterns = buildAllTriples();\n    vector&lt;vector&lt;int&gt;&gt; compatList = buildCompat(patterns);\n    // ways of coloring i columns is dp[i]\n    vector&lt;int&gt; dp(36,1), next_dp(36,0);\n    for (int col = 2; col &lt;= N; ++col){\n        for (int i = 0; i &lt; 36; ++i) nextDP[i] = 0;\n        for (int i = 0; i &lt; 36; ++i){\n            long long sumWays = 0;\n            for (int j : compatList[i]){\n                sumWays += dp[j];\n                if (sumWays &gt;= MOD) sumWays -= MOD;\n            }\n            nextDP[i] = (int)sumWays;\n        }\n        dp.swap(nextDP);\n    }\n    long long answer = 0;\n    for (int i = 0; i &lt; 36; ++i){\n        answer += dp[i];\n        if (answer &gt;= MOD) answer -= MOD;\n    }\n    return (int)answer;\n}\n</code></pre>"},{"location":"DSAyy/dp/#kth-manhattan-distance-neighbourhood","title":"Kth Manhattan Distance Neighbourhood","text":""},{"location":"DSAyy/dp/#what-does-the-problem-say","title":"What does the problem say...","text":"<p>Given a Matrix \\(n \\times m\\) and int K, for every el <code>M[i][j]</code>, find the max el in K-Manhattan distance neighborhood.</p> <p>$$ \\text{For each  (i,j), compute }  max{M[p][q] \\space | \\space |i-p| + |j-q| \\leq K }</p> <p>$$ Example:  - M = \\(\\begin{bmatrix} 1 &amp; 2 &amp; 4 \\\\ 4 &amp; 5 &amp; 8 \\end{bmatrix}\\) , K = 2, The output would be \\(\\begin{bmatrix} 5 &amp; 8 &amp; 8 \\\\ 8 &amp; 8 &amp; 8 \\end{bmatrix}\\) </p>"},{"location":"DSAyy/dp/#how-to-look-at-neighbors","title":"How to look at neighbors?","text":"<p>We use K rounds of DP. At each round d, for every cell (i,j), we compute the max amongst itself and 4 neighbors {up down left right} from the previous round. This way after K rounds, we would have max val within manhattan distance K.</p> <pre><code>vector&lt;vector&lt;int&gt;&gt; KMan(int A, vector&lt;vector&lt;int&gt;&gt; &amp;B){\n    int n = B.size();\n    if (n == 0) return {};\n    int m = B[0].size(), K = A;\n    vector&lt;vector&lt;int&gt;&gt; dp_prev(n, vector&lt;int&gt;(m)), curr(n, vector&lt;int&gt;(m));\n    // prev would have the max comparisons from the last round\n    for (int i = 0; i &lt; n; ++i) \n        for (int j = 0; j &lt; m; ++j) dp_prev[i][j] = B[i][j];\n    const int dir[4][2] = {{-1,0}, {1,0}, {0,-1}, {0,1}};\n    for (int d = 1; d &lt;= K; ++d){\n        for (int i = 0; i &lt; n; ++i) {   \n            for (int j = 0; j &lt; m; ++j){\n                int best = dp_prev[i][j];\n                for (auto [x,y] : dir){\n                    int ni = i + x, nj = j + y;\n                    if (ni &gt;= 0 &amp;&amp; ni &lt; n &amp;&amp; nj &gt;= 0 &amp;&amp; nj &lt; m)\n                        best = max(best, dp_prev[ni][nj]);\n                }\n                dp_curr[i][j] = best;\n            }\n        }\n        dp_prev.swap(dp_curr);\n    }\n    return dp_prev;\n}\n</code></pre>"},{"location":"DSAyy/dp/#best-time-to-buy-and-sell-stocks-at-most-b-times","title":"Best time to buy and sell stocks at most B times.","text":""},{"location":"DSAyy/dp/#problem-statement_4","title":"Problem statement","text":"<p>Given an array A of size N, where <code>A[i]</code> is the price of the stock on day i, and an integer B, find the maximum profit possible with atmost B transactions.  A transaction consists of buying and selling stocks.</p> <p>Example: - \\(A[i] = [2,4,1]\\)  B = 2 =&gt; Output = 2</p>"},{"location":"DSAyy/dp/#how_4","title":"How","text":"<p>If \\(B \\geq N/2\\) , you can trade kitna bhi. So the ans is just the sum of all the upward movements. If \\(B &lt; N/2\\) , USE DP.      Let \\(dp[k][i]\\) be the max profit with at index i with atmost k transactions.     $$     dp[k][i] = max(dp[k][i], A[i] + max_{j &lt; i}(dp[k-1][j] - A[j]))     $$     But instead of looping purra, we can just maintain the best price.     $$     bestPrice = max(dp[k-1][j] - A[j])      $$     Maintain this as we move ahead with i.</p> <pre><code>int BuySellB(vector&lt;int&gt; &amp;A, int B){\n    int N = A.size();\n    if (N &lt; 2 || B == 0) return 0;\n    if (B &gt;= N/2){\n        // as many transactions as we want\n        int profit = 0;\n        for (int i = 1; i &lt; N; ++i)\n            if (A[i] &gt; A[i-1]) \n                profit += A[i] - A[i-1];\n        return profit;\n    }\n    // otherwise we use normal dp\n    vector&lt;vector&lt;int&gt;&gt; dp(B+1, vector&lt;int&gt;(N,0));\n    for (int k = 1; k &lt;= B; ++k){\n        int bestPrev = dp[k-1][0] - A[0];\n        for (int i = 1; i &lt; N; ++i){\n            dp[k][i] = max(dp[k][i-1], A[i] + bestPrev);\n            bestPrev = max(bestPrev, dp[k-1][i] - A[i]);\n        }\n    }\n    return dp[B][N-1];\n}\n</code></pre>"},{"location":"DSAyy/dp/#coins-in-a-line","title":"Coins in a Line","text":""},{"location":"DSAyy/dp/#problem_4","title":"Problem","text":"<p>Array A of coins in a line (len n is even). Two players take turns picking either leftmost or the rightmost coin. Each want to maximise their total. Assume you go first. Return max money you can win.</p> <p>Example - \\(A = [1,2,3,4]\\) =&gt; Output = 6 - \\(A = [5,4,8,10]\\) =&gt; Output = 15</p>"},{"location":"DSAyy/dp/#explanation","title":"Explanation","text":"<p>Let \\(dp[i][j]\\) be the max money you can get from \\(A[i...j]\\) if its your turn. - If you pick \\(A[i]\\), your opponent faces \\(A[i+1...j]\\) and will min your future gain     - You get \\(A[i] + min(dp[i+2][j],dp[i+1][j-1] )\\)  - If you pick \\(A[j]\\) , you get \\(A[j] + min(dp[i][j-2], dp[i+1][j-1])\\)  - Take max of both</p> <pre><code>int maxCoin(vector&lt;int&gt; &amp;A){\n    int n = A.size();\n    if (n == 0) return 0;\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0));\n    for (int i = 0; i &lt; n; ++i) dp[i][i] = A[i];\n    for (int i = 0; i +1 &lt; n; ++i) dp[i][i+1] = max(A[i],A[i+1]);\n\n    for (int len = 3; len &lt;= n; ++len){\n        for (int i = 0; i + len &lt; n; ++i){\n            int j = i + len - 1;\n            int pickLeft = A[i] + min(\n                (i+2 &lt;= j ? dp[i+2][j] : 0),\n                (i + 1 &lt;= j-1 ? dp[i+1][j-1] : 0);\n            );\n            int pickRight = A[i] + min(\n                (i &lt;= j-2 ? dp[i][j-2] : 0),\n                (i+1 &lt;= j-1 ? dp[i+1][j-1] : 0)\n            );\n            dp[i][j] = max(pickLeft, pickRight);\n        }\n    }\n    return dp[0][n-1];\n}\n</code></pre>"},{"location":"DSAyy/dp/#evaluate-expression-to-true","title":"Evaluate Expression To True","text":""},{"location":"DSAyy/dp/#problem_5","title":"Problem","text":"<p>Boolean expression de rakha, count ways to parenthesize A such that it evaluates to true. Return ans modulo 1003. Example: - A = \"T|F\" =&gt; 1 - A = \"T^TF\" =&gt; 0</p>"},{"location":"DSAyy/dp/#how_5","title":"How","text":"<p>Let n be len of A. There are (n+1)/2 operands (at even pos). Let <code>dp_t[i][j]</code> be the number of ways to evaluate operands i to j to true. Let <code>dp_f[i][j]</code> be the number of ways to eval operands i to j to false. - Part at k: <code>[i..k]</code> and <code>[k+1..j]</code>, operator <code>A[2k + 1]</code> - For each operator, count ways to get T/F by comb results from L and R subprobs.</p> <pre><code>int cntTrue(string A){\n    const int MOD = 1003;\n    int n = A.size();\n    int m = (n+1)/2;\n    vector&lt;vector&lt;int&gt;&gt; dp_t(m, vector&lt;int&gt; (m,0));\n    vector&lt;vector&lt;int&gt;&gt; dp_f(m, vector&lt;int&gt; (m,0));\n    // initialize single characters\n    for (int k = 0; k &lt; m; ++k){\n        char c = A[2*k]; // every operand is at even index\n        if (c == 'T') dp_t[k][k] = 1;\n        else dp_f[k][k] = 1;\n    } \n    // fill dp for substr of increasing len\n    for (int len = 2; len &lt;= m; ++len){\n        for (int i = 0; i &lt; len -1 &lt; m; ++i){\n            int j = i + len - 1;\n            int waysT = 0, waysF= 0;\n            for (int k = i; k &lt; j; ++k){\n                char op = A[2*k + 1]; //operator between the operands\n                int lt = dp_t[i][k], lf = dp_f[i][k];\n                int rt = dp_t[k+1][j], rf = dp_f[k+1][j];\n                int totL = (lt + rt) % MOD;\n                int totR = (rt +rf) % MOD;\n                if (op == '&amp;'){\n                    waysT += lt*rt;\n                    waysF += totL*totR - lt*rt;\n                }\n                else if (op == '|'){\n                    waysF += lf * rf;\n                    waysT += totL*totR - lt*rt;\n                }\n                else if (op == '^'){\n                    waysT += lt*rf + lf*rt;\n                    waysF += lt*rt + lf*rf;\n                }\n            }\n            dp_t[i][j] = waysT;\n            dp_f[i][j] = waysF;\n        }\n    }\n    return dp_t[0][m-1];\n}\n</code></pre>"},{"location":"DSAyy/dp/#egg-drop-problem","title":"Egg Drop Problem","text":""},{"location":"DSAyy/dp/#problem-toh-zindagi-meh-hai","title":"Problem toh zindagi meh hai","text":"<p>Given A Eggs, and building with B floors. Find min moves reqd to find the critical floor C (such that any egg dropped above C would break, and at or below C would not). Each move, you may drop egg from any floor. An egg that breaks cannot be used again.</p> <p>Input : 2 integers, A and B. Example: - A = 1, B = 2, output = 2 - A = 2, B = 10, output = 4</p>"},{"location":"DSAyy/dp/#_1","title":"????","text":"<p>Let <code>dp[k]</code> be max num of floors you can test k eggs and m moves. $$ dp[k] = 1 + dp[k] + dp[k-1] $$ Drop an egg - If it breaks, you have <code>k-1</code> eggs, <code>m-1</code> moves left. (<code>dp[k-1]</code>) - if it doesn't, you have k eggs and m-1 moves left. <code>dp[k]</code> floors +1 for current floor being tested.</p> <pre><code>int eggDrop(int A, int B){\n    vector&lt;int&gt; dp(A+1,0); // dp[k] = max floor with k eggs\n    int moves = 0;\n    while (dp[A] &lt; B){ // we have to test atleast all the floors to be certain\n        moves ++;\n        for (int k = A; k &gt;= 1; --k)\n            dp[k] += dp[k-1] + 1;\n    }\n    return moves;\n}\n</code></pre>"},{"location":"DSAyy/dp/#best-time-to-buy-and-sell-stocks-3","title":"Best time to buy and sell stocks 3","text":"<p><code>A[i]</code> is the price of stock on day <code>i</code>. Find the max possible profit by making atmost 2 interactions. You must sell before you buy again.</p> <p>Example - \\(A = [1,2,1,2]\\) Output is 2 - \\(A = [7,2,4,8,7]\\) Output is 6</p>"},{"location":"DSAyy/dp/#kaise_1","title":"Kaise","text":"<ul> <li>Let <code>firstBuy</code> be max profit after first buy (-ve )</li> <li>let <code>firstSell</code> be the max profit after first sell.</li> <li>let <code>secondBuy</code> be max prof after second buy (= profit after first sell - price)</li> <li>let <code>secondSell</code> max prof after second sell. On each day we update thse</li> </ul> <pre><code>int buySell3(vector&lt;int&gt;&amp; A){\n    int n = A.size();\n    if (n &lt; 2) return 0;\n    int firstBuy = INT_MIN, secondBuy = INT_MIN;\n    int firstSell = 0, secondSell = 0;\n    for (int price : A){\n        firstBuy = max(firstBuy, -price);\n        firstSell = max(firstSell, firstBuy + price);\n        secondBuy = max(secondBuy, firstSell - price);\n        secondSell = max(secondSell,secondBuy + price);\n    }\n    return secondSell;\n}\n</code></pre>"},{"location":"DSAyy/graph/","title":"Graphs","text":"\\[ a^2 + b^2 = c^2 \\]"}]}